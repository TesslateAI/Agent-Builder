# =============================================================================
# Agent-Builder Production Environment Configuration
# Copy this file to .env.prod and update with your production values
# =============================================================================

# ===================
# Application Settings
# ===================
VERSION=latest
APP_PORT=5000
DOMAIN=your-domain.com
LOG_LEVEL=INFO

# Flask production settings
FLASK_ENV=production
FLASK_DEBUG=false
FLASK_RUN_HOST=0.0.0.0
FLASK_RUN_PORT=5000

# ===================
# LLM Configuration (REQUIRED)
# ===================

# Production LLM API - Use GPT-4 for better results
OPENAI_API_KEY=sk-your-production-openai-api-key-here
OPENAI_API_BASE=https://api.openai.com/v1
OPENAI_MODEL_NAME=gpt-4

# Alternative: Anthropic Claude for production
# OPENAI_API_KEY=your-anthropic-production-key
# OPENAI_API_BASE=https://api.anthropic.com/v1
# OPENAI_MODEL_NAME=claude-3-sonnet-20240229

# ===================
# Database Configuration
# ===================
POSTGRES_DB=agentbuilder
POSTGRES_USER=agentbuilder
POSTGRES_PASSWORD=your-secure-database-password-here
DATABASE_URL=postgresql://agentbuilder:your-secure-database-password-here@postgres:5432/agentbuilder

# ===================
# Cache Configuration
# ===================
REDIS_PASSWORD=your-secure-redis-password-here
REDIS_URL=redis://:your-secure-redis-password-here@redis:6379/0

# ===================
# Authentication & Authorization (REQUIRED for production)
# ===================

# JWT Configuration - Generate with: python -c "import secrets; print(secrets.token_hex(32))"
JWT_SECRET_KEY=your-super-secure-jwt-secret-key-minimum-256-bits-change-in-production
JWT_ALGORITHM=HS256

# Keycloak Configuration
KEYCLOAK_ADMIN_USERNAME=admin
KEYCLOAK_ADMIN_PASSWORD=your-super-secure-keycloak-admin-password
KEYCLOAK_REALM=agent-builder
KEYCLOAK_CLIENT_ID=agent-builder-app  
KEYCLOAK_CLIENT_SECRET=your-super-secure-keycloak-client-secret
KEYCLOAK_DB=keycloak

# Keycloak SSL/TLS Settings (HTTPS required in production)
KC_HTTPS_REQUIRED=true
KC_HTTP_ENABLED=false
KC_LOG_LEVEL=WARN

# Session Management
SESSION_TIMEOUT=3600
SESSION_CLEANUP_INTERVAL=300

# Redis Configuration (required for session management)
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0

# Legacy compatibility
SECRET_KEY=your-32-character-secret-key-here
JWT_SECRET=your-jwt-secret-key-here

# SSL/TLS Configuration
ACME_EMAIL=your-email@your-domain.com

# ===================
# Traefik Reverse Proxy
# ===================
TRAEFIK_INSECURE=false
TRAEFIK_LOG_LEVEL=INFO

# Generate with: echo $(htpasswd -nb admin password) | sed -e s/\\$/\\$\\$/g
TRAEFIK_AUTH=admin:$$2y$$10$$your-hashed-password-here

# ===================
# Enterprise Features (Authentication is REQUIRED in production)
# ===================
ENTERPRISE_ENABLED=true
AUTH_ENABLED=true
AUDIT_ENABLED=true
AUDIT_LOG_LEVEL=INFO
METRICS_ENABLED=true

# Environment
ENVIRONMENT=production
FRONTEND_URL=https://your-domain.com

# ===================
# Monitoring (Optional)
# ===================
GRAFANA_PASSWORD=your-secure-grafana-password-here

# Metrics backend
METRICS_BACKEND=prometheus
# METRICS_BACKEND=statsd
# METRICS_BACKEND=opentelemetry

# ===================
# MCP Configuration
# ===================
MCP_CONFIG_FILE=servers_config.json
MCP_ENABLE_ROOTS=true
MCP_ENABLE_SAMPLING=true
MCP_ENABLE_EXPERIMENTAL=false

# ===================
# Production Optimization
# ===================

# Worker processes (adjust based on CPU cores)
WORKERS=4

# Request limits
MAX_CONTENT_LENGTH=16777216  # 16MB

# Timeout settings
TIMEOUT=300  # 5 minutes

# ===================
# CORS Configuration
# ===================
CORS_ORIGINS=https://your-domain.com,https://www.your-domain.com

# ===================
# Production Deployment Notes  
# ===================
#
# SECURITY REQUIREMENTS:
# 1. NEVER commit this file with real secrets to version control
# 2. Use a secure password manager for production secrets
# 3. Generate strong, unique passwords for all services (minimum 32 characters)
# 4. Enable HTTPS/TLS everywhere (handled by Traefik + Let's Encrypt)
# 5. Regularly rotate JWT_SECRET_KEY and client secrets
# 6. Enable audit logging for compliance and security monitoring
# 7. Set up monitoring and log aggregation
# 8. Configure network firewalls and security groups
# 9. Use container image scanning for vulnerabilities
# 10. Implement backup strategies for persistent data
#
# AUTHENTICATION SETUP:
# 1. Keycloak runs on auth.your-domain.com subdomain
# 2. Users authenticate via OAuth 2.0/OIDC flow
# 3. JWT tokens manage sessions with Redis backend
# 4. RBAC enforces permissions at API level
# 5. All API routes are protected by default
# 6. Admin users created via Keycloak admin console
#
# Quick Production Deployment:
# 1. Copy this file to .env.prod
# 2. Update DOMAIN with your actual domain
# 3. Generate and set all secure passwords/secrets
# 4. Update Keycloak client secret in production-realm.json
# 5. Run: docker-compose -f docker-compose.prod.yml up -d
# 6. Access Keycloak admin at https://auth.your-domain.com
# 7. Create admin users and configure permissions
# 8. Test authentication flow
# 9. Set up monitoring, backups, and alerts