# =============================================================================
# Docker Compose Production Configuration
# Optimized for production deployment with scalability and security
# =============================================================================


services:
  # =============================================================================
  # Application Service (Flask + React built-in)
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_ENV: production
    image: agent-builder:${VERSION:-latest}
    restart: unless-stopped
    ports:
      - "${APP_PORT:-5000}:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_RUN_HOST=0.0.0.0
      - FLASK_RUN_PORT=5000
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env.prod
    volumes:
      # Data persistence
      - app-data:/app/data
      - app-logs:/app/logs
      # Configuration files (read-only)
      - ./builder/backend/servers_config.json:/app/builder/backend/servers_config.json:ro
      - ./builder/backend/enterprise_config.yaml:/app/builder/backend/enterprise_config.yaml:ro
    networks:
      - agent-builder-prod
      - agent-builder-internal
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=agent-builder-prod"
      - "traefik.http.routers.app.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.app.entrypoints=websecure"
      - "traefik.http.routers.app.tls.certresolver=letsencrypt"
      - "traefik.http.services.app.loadbalancer.server.port=5000"
      - "traefik.http.services.app.loadbalancer.healthcheck.path=/health"

  # =============================================================================
  # Database Service (PostgreSQL)
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-agentbuilder}
      - POSTGRES_USER=${POSTGRES_USER:-agentbuilder}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - agent-builder-internal
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-agentbuilder} -d ${POSTGRES_DB:-agentbuilder}"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # Cache Service (Redis)
  # =============================================================================
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - agent-builder-internal
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # Reverse Proxy & Load Balancer (Traefik)
  # =============================================================================
  traefik:
    image: traefik:v3.0
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard (secured in production)
    command:
      - --api.dashboard=true
      - --api.insecure=${TRAEFIK_INSECURE:-false}
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=agent-builder-prod
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --log.level=${TRAEFIK_LOG_LEVEL:-INFO}
      - --accesslog=true
      - --metrics.prometheus=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-letsencrypt:/letsencrypt
    networks:
      - agent-builder-prod
    environment:
      - TRAEFIK_API_INSECURE=${TRAEFIK_INSECURE:-false}
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"


# =============================================================================
# Networks
# =============================================================================
networks:
  agent-builder-prod:
    driver: bridge
    name: agent-builder-prod
  agent-builder-internal:
    driver: bridge
    internal: true
    name: agent-builder-internal

# =============================================================================
# Volumes
# =============================================================================
volumes:
  app-data:
    name: agent-builder-app-data
  app-logs:
    name: agent-builder-app-logs
  postgres-data:
    name: agent-builder-postgres-data
  redis-data:
    name: agent-builder-redis-data
  traefik-letsencrypt:
    name: agent-builder-traefik-letsencrypt