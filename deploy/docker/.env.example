# =============================================================================
# Agent-Builder Development Environment Configuration
# Copy this file to .env and update with your values for development
# =============================================================================

# ===================
# LLM Configuration (REQUIRED)
# ===================

# Option 1: OpenAI (Recommended for development)
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_API_BASE=https://api.openai.com/v1
OPENAI_MODEL_NAME=gpt-3.5-turbo

# Option 2: Anthropic (via OpenAI-compatible endpoint)
# OPENAI_API_KEY=your-anthropic-key
# OPENAI_API_BASE=https://api.anthropic.com/v1
# OPENAI_MODEL_NAME=claude-3-sonnet-20240229

# Option 3: Local Ollama (free but requires local setup)
# OPENAI_API_BASE=http://localhost:11434/v1
# OPENAI_API_KEY=ollama
# OPENAI_MODEL_NAME=llama3

# Option 4: Other OpenAI-compatible APIs
# OPENAI_API_KEY=your-api-key
# OPENAI_API_BASE=https://api.your-provider.com/v1
# OPENAI_MODEL_NAME=your-model-name

# ===================
# Flask Development Configuration
# ===================

# Server settings (usually don't need to change)
FLASK_ENV=development
FLASK_DEBUG=true
# FLASK_RUN_HOST=0.0.0.0
# FLASK_RUN_PORT=5000

# ===================
# MCP Configuration (Optional)
# ===================

# Path to MCP servers configuration file
# MCP_CONFIG_FILE=builder/backend/servers_config.json

# MCP feature flags
# MCP_ENABLE_ROOTS=true
# MCP_ENABLE_SAMPLING=true
# MCP_ENABLE_EXPERIMENTAL=false

# ===================
# Authentication & Authorization (Required for Enterprise)
# ===================

# JWT Configuration
JWT_SECRET_KEY=your-super-secret-jwt-key-change-this-in-production
JWT_ALGORITHM=HS256

# Keycloak Configuration
KEYCLOAK_PUBLIC_URL=http://localhost:8081    # For browser redirects
KEYCLOAK_INTERNAL_URL=http://keycloak:8080   # For backend API calls
KEYCLOAK_REALM=agent-builder
KEYCLOAK_CLIENT_ID=agent-builder-app
KEYCLOAK_CLIENT_SECRET=dev-client-secret
KEYCLOAK_REDIRECT_URI=http://localhost:5000/api/auth/callback

# Keycloak Admin API
KEYCLOAK_ADMIN_USERNAME=admin
KEYCLOAK_ADMIN_PASSWORD=admin

# ===================
# Database Configuration
# ===================

# PostgreSQL (for enterprise features)
DATABASE_URL=postgresql://devuser:devpass@postgres:5432/agentbuilder_dev

# Redis (for sessions and caching)
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0

# ===================
# Development Options (Optional)
# ===================

# Application settings
ENVIRONMENT=development
DEBUG=true
FRONTEND_URL=http://localhost:5173

# Logging level
# LOG_LEVEL=DEBUG

# CORS origins for frontend development
# CORS_ORIGINS=http://localhost:5173,http://localhost:3000

# Enterprise Features
AUDIT_ENABLED=true
AUDIT_LOG_LEVEL=INFO
SESSION_TIMEOUT=3600
SESSION_CLEANUP_INTERVAL=300

# Development helpers
AUTO_CREATE_TEST_DATA=true
SKIP_EMAIL_VERIFICATION=true
DETAILED_ERRORS=true

# ===================
# Production Environment Variables (Reference)
# ===================
# For production deployment, also configure:
# - DOMAIN=your-domain.com
# - Strong JWT_SECRET_KEY (generate with: python -c "import secrets; print(secrets.token_hex(32))")
# - KEYCLOAK_CLIENT_SECRET (generate new secret)
# - POSTGRES_PASSWORD (strong database password)
# - REDIS_PASSWORD (Redis password)
# - All other passwords and secrets
# - SSL/TLS certificates via Let's Encrypt (handled by Traefik)

# ===================
# Development Notes
# ===================
# 
# 1. Only OPENAI_API_KEY is required to get started
# 2. Most other settings have sensible defaults
# 3. For Docker development, this file is automatically loaded
# 4. For local development, run: source .env (or use python-dotenv)
#
# Quick Start:
# 1. Copy this file to .env
# 2. Add your OpenAI API key
# 3. Run: docker-compose -f deploy/docker/docker-compose.dev.yml up -d
#
# Authentication:
# - Use "Dev Login (Skip Auth)" button for quick development
# - Or use SSO with admin/admin credentials via Keycloak
# - Access Keycloak admin console at http://localhost:8081